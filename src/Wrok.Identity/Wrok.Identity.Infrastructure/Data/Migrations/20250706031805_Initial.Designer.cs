// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Wrok.Identity.Infrastructure.Data;

#nullable disable

namespace Wrok.Identity.Infrastructure.Data.Migrations
{
    [DbContext(typeof(WrokIdentityDbContext))]
    [Migration("20250706031805_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Wrok.Identity.Domain.Entities.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tenants", (string)null);
                });

            modelBuilder.Entity("Wrok.Identity.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<string>("Role");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Wrok.Identity.Domain.Entities.AdminUser", b =>
                {
                    b.HasBaseType("Wrok.Identity.Domain.Entities.User");

                    b.Property<bool>("IsSuper")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("JoinedTenantAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasIndex("TenantId");

                    b.ToTable("Users", t =>
                        {
                            t.Property("JoinedTenantAt")
                                .HasColumnName("AdminUser_JoinedTenantAt");

                            t.Property("TenantId")
                                .HasColumnName("AdminUser_TenantId");
                        });

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("Wrok.Identity.Domain.Entities.FreelancerUser", b =>
                {
                    b.HasBaseType("Wrok.Identity.Domain.Entities.User");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Freelancer");
                });

            modelBuilder.Entity("Wrok.Identity.Domain.Entities.ProjectManagerUser", b =>
                {
                    b.HasBaseType("Wrok.Identity.Domain.Entities.User");

                    b.Property<DateTime>("JoinedTenantAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasIndex("TenantId");

                    b.HasDiscriminator().HasValue("ProjectManager");
                });

            modelBuilder.Entity("Wrok.Identity.Domain.Entities.AdminUser", b =>
                {
                    b.HasOne("Wrok.Identity.Domain.Entities.Tenant", "Tenant")
                        .WithMany("AdminUsers")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Wrok.Identity.Domain.Entities.ProjectManagerUser", b =>
                {
                    b.HasOne("Wrok.Identity.Domain.Entities.Tenant", "Tenant")
                        .WithMany("ProjectManagerUsers")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Wrok.Identity.Domain.Entities.Tenant", b =>
                {
                    b.Navigation("AdminUsers");

                    b.Navigation("ProjectManagerUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
